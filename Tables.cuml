/' for database modeling using modified class diagrams 

-tables, views, queries, etc.

table(x)
enumeration(x)
sequence(x)
index(x)
view(x)
query(x)

-table's components, fields

primary(x)
small_primary(x)
foreign(x, y, z)
small_foreign(x, y, z)
unique_foreign(x, y, z)
small_unique_foreign(x, y, z)
comment(x)

-relations between tables

one(x, y, z = 'd')
one_dot(x, y, z = 'd')
many(x, y, z = 'd')
many_dot(x, y, z = 'd')

-joins between the tables

cross_join(x, y, w, s ='')
inner_join(x, y, z, v, w, s ='')
left_join(x, y, z, v, w, s ='')
right_join(x, y, z, v, w, s ='')
full_join(x, y, z, v, w, s ='')

-combination of queries

union(x, y, w, s ='')
union_all(x, y, w, s ='')
intersect(x, y, w, s ='')
intersect_all(x, y, w, s ='')
except(x, y, w, s ='')
except_all(x, y, w, s ='')

'/

!define TABLES

/' stereotypes / decorations '/

!define table(x) class x <<(T,#FFAAAA) Table>>

!define enumeration(x) class x <<(E, lightblue) EnumTable>>

!define sequence(x) class x <<(S, red) Sequence>>

!define index(x) class x <<(I, orange) Index>>

!define view(x) class x <<(V, violet) View>>

!define query(x, y = ' ') class y <<(Q, violet) Query>> as x

/' field constrains '/

/' primary key (single field) '/

!define primary(x) {field} <&key><u><b>x</b></u> : serial NOT NULL PRIMARY KEY

!define small_primary(x) {field} <&key><u><b>x</b></u> : smallserial NOT NULL PRIMARY KEY

/' foreign key single field to single field, 1 to many relation.
first parameter - local table field's name, which references
second parameter - name of the referenced table
third parameter - name of the referenced field in the referenced table
i.e. x REFERENCES y.z
'/

!define foreign(x, y, z) {field} <&link-intact><i><b>x</b></i> : integer NOT NULL REFERENCES <b>y.z</b>

!define small_foreign(x, y, z) {field} <&link-intact><i><b>x</b></i> : smallint NOT NULL REFERENCES <b>y.z</b>

/' foreign key single field to single field, 1 to 1.
first parameter - local table field's name, which references
second parameter - name of the referenced table
third parameter - name of the referenced field in the referenced table
i.e. x REFERENCES y.z
'/

!define unique_foreign(x, y, z) {field} <&link-intact><i><b>x</b></i> : integer UNIQUE NOT NULL REFERENCES <b>y.z</b>

!define small_unique_foreign(x, y, z) {field} <&link-intact><i><b>x</b></i> : smallint UNIQUE NOT NULL REFERENCES <b>y.z</b>

!define comment(x) {method} x

/' relations between the tables as "1 to 1" and "1 to many"
first parameter - name of the source table (always 1)
second parameter - name of the target table (many or 1)
third parameter (optional) - direction of drawing from the source to the target,
dafaults to 'd' (as down)
e.g. x "1" -z- "*" y or "1" .z. "1" y
'/

!define one(x, y, z = 'd') x "1" -z- "1" y

!define one_dot(x, y, z = 'd') x "1" .z. "1"

!define many(x, y, z = 'd') x "1" -z- "*" y

!define many_dot(x, y, z = 'd') x "1" .z. "*" y

/' macro to create a representation of the CROSS JOIN of two tables and to
graphically link the JOIN object to the LEFT and RIGHT tables.
first parameter (x) - single token as reference to the LEFT table
second parameter (y) - single token as reference to the RIGHT table - always
indicated in the SQL definition
third paremeter (w) - reference (single token) to be used for the created JOIN
object (not shown in the diagram!)
fourth parameter (s, optional, defaults to an empty string) - name to be
indicated as the LEFT part of JOIN. Either leave it empty (for compound /nested
JOIN statements), or use the same value as the first argument (x) - for the
first JOIN in the chain.
i.e. - s CROSS JOIN y - which is referenced as w '/

!definelong cross_join(x, y, w, s ='')
class " " as w <<(J, pink) CROSS JOIN>> {
    {field} s <b>CROSS JOIN</b> y
}

x --* "L" w

y --* "R" w

!enddefinelong

/' macro to create a representation of the INNER JOIN of two tables based
on equality of two qualified fields, which may belong to other tables, and to
graphically link the JOIN object to the LEFT and RIGHT tables.
first parameter (x) - single token as reference to the LEFT table
second parameter (y) - single token as reference to the RIGHT table - always
indicated in the SQL definition
third parameter (z) - qualified name of a field, used in equality comparison
forth parameter (v) - qualified name of the second field used in equality
comparison
fifth paremeter (w) - reference (single token) to be used for the created JOIN
object (not shown in the diagram!)
sixth parameter (s, optional, defaults to an empty string) - name to be
indicated as the LEFT part of JOIN. Either leave it empty (for compound /nested
JOIN statements), or use the same value as the first argument (x) - for the
first JOIN in the chain.
i.e. - s INNER JOIN y ON z = v - which is referenced as w '/

!definelong inner_join(x, y, z, v, w, s ='')
class " " as w <<(J, pink) INNER JOIN>> {
    {field} s <b>INNER JOIN</b> y
    {field} <b>ON</b> z = v
}

x --* "L" w

y --* "R" w

!enddefinelong

/' macro to create a representation of the LEFT OUTER JOIN of two tables based
on equality of two qualified fields, which may belong to other tables, and to
graphically link the JOIN object to the LEFT and RIGHT tables.
first parameter (x) - single token as reference to the LEFT table
second parameter (y) - single token as reference to the RIGHT table - always
indicated in the SQL definition
third parameter (z) - qualified name of a field, used in equality comparison
forth parameter (v) - qualified name of the second field used in equality
comparison
fifth paremeter (w) - reference (single token) to be used for the created JOIN
object (not shown in the diagram!)
sixth parameter (s, optional, defaults to an empty string) - name to be
indicated as the LEFT part of JOIN. Either leave it empty (for compound /nested
JOIN statements), or use the same value as the first argument (x) - for the
first JOIN in the chain.
i.e. - s LEFT OUTER JOIN y ON z = v - which is referenced as w '/

!definelong left_join(x, y, z, v, w, s ='')
class " " as w <<(J, pink) LEFT JOIN>> {
    {field} s <b>LEFT OUTER JOIN</b> y
    {field} <b>ON</b> z = v
}

x --* "L" w

y --* "R" w

!enddefinelong

/' macro to create a representation of the RIGHT OUTER JOIN of two tables based
on equality of two qualified fields, which may belong to other tables, and to
graphically link the JOIN object to the LEFT and RIGHT tables.
first parameter (x) - single token as reference to the LEFT table
second parameter (y) - single token as reference to the RIGHT table - always
indicated in the SQL definition
third parameter (z) - qualified name of a field, used in equality comparison
forth parameter (v) - qualified name of the second field used in equality
comparison
fifth paremeter (w) - reference (single token) to be used for the created JOIN
object (not shown in the diagram!)
sixth parameter (s, optional, defaults to an empty string) - name to be
indicated as the LEFT part of JOIN. Either leave it empty (for compound /nested
JOIN statements), or use the same value as the first argument (x) - for the
first JOIN in the chain.
i.e. - s RIGHT OUTER JOIN y ON z = v - which is referenced as w '/

!definelong right_join(x, y, z, v, w, s ='')
class " " as w <<(J, pink) RIGHT JOIN>> {
    {field} s <b>RIGHT OUTER JOIN</b> y
    {field} <b>ON</b> z = v
}

x --* "L" w

y --* "R" w

!enddefinelong

/' macro to create a representation of the FULL OUTER JOIN of two tables based
on equality of two qualified fields, which may belong to other tables, and to
graphically link the JOIN object to the LEFT and RIGHT tables.
first parameter (x) - single token as reference to the LEFT table
second parameter (y) - single token as reference to the RIGHT table - always
indicated in the SQL definition
third parameter (z) - qualified name of a field, used in equality comparison
forth parameter (v) - qualified name of the second field used in equality
comparison
fifth paremeter (w) - reference (single token) to be used for the created JOIN
object (not shown in the diagram!)
sixth parameter (s, optional, defaults to an empty string) - name to be
indicated as the LEFT part of JOIN. Either leave it empty (for compound /nested
JOIN statements), or use the same value as the first argument (x) - for the
first JOIN in the chain.
i.e. - s FULL OUTER JOIN y ON z = v - which is referenced as w '/

!definelong full_join(x, y, z, v, w, s ='')
class " " as w <<(J, pink) FULL JOIN>> {
    {field} s <b>FULL OUTER JOIN</b> y
    {field} <b>ON</b> z = v
}

x --* "L" w

y --* "R" w

!enddefinelong

/' macro to create a representation of the UNION of two queries and to
graphically link the UNION object to the LEFT and RIGHT queries.
first parameter (x) - single token as reference to the LEFT query
second parameter (y) - single token as reference to the RIGHT query - always
indicated in the SQL definition
third paremeter (w) - reference (single token) to be used for the created UNION
object (not shown in the diagram!)
fourth parameter (s, optional, defaults to an empty string) - name to be
indicated as the LEFT part of UNION. Either leave it empty (for compound /nested
UNION statements), or use the same value as the first argument (x) - for the
first UNION in the chain.
i.e. - s UNION y - which is referenced as w '/

!definelong union(x, y, w, s ='')
class " " as w <<(J, violet) UNION>> {
    {field} s <b>UNION</b> y
}

x --* "L" w

y --* "R" w

!enddefinelong

/' macro to create a representation of the UNION ALL of two queries and to
graphically link the UNION object to the LEFT and RIGHT queries.
first parameter (x) - single token as reference to the LEFT query
second parameter (y) - single token as reference to the RIGHT query - always
indicated in the SQL definition
third paremeter (w) - reference (single token) to be used for the created UNION
object (not shown in the diagram!)
fourth parameter (s, optional, defaults to an empty string) - name to be
indicated as the LEFT part of UNION. Either leave it empty (for compound /nested
UNION statements), or use the same value as the first argument (x) - for the
first UNION in the chain.
i.e. - s UNION ALL y - which is referenced as w '/

!definelong union_all(x, y, w, s ='')
class " " as w <<(J, violet) UNION ALL>> {
    {field} s <b>UNION ALL</b> y
}

x --* "L" w

y --* "R" w

!enddefinelong

/' macro to create a representation of the INTERSECT of two queries and to
graphically link the INTERSECT object to the LEFT and RIGHT queries.
first parameter (x) - single token as reference to the LEFT query
second parameter (y) - single token as reference to the RIGHT query - always
indicated in the SQL definition
third paremeter (w) - reference (single token) to be used for the created
INTERSECT object (not shown in the diagram!)
fourth parameter (s, optional, defaults to an empty string) - name to be
indicated as the LEFT part of INTERSECT. Either leave it empty (for compound
/nested INTERSECT statements), or use the same value as the first argument (x)
- for the first INTERSECT in the chain.
i.e. - s INTERSECT y - which is referenced as w '/

!definelong intersect(x, y, w, s ='')
class " " as w <<(J, violet) INTERSECT>> {
    {field} s <b>INTERSECT</b> y
}

x --* "L" w

y --* "R" w

!enddefinelong

/' macro to create a representation of the INTERSECT ALL of two queries and to
graphically link the INTERSECT object to the LEFT and RIGHT queries.
first parameter (x) - single token as reference to the LEFT query
second parameter (y) - single token as reference to the RIGHT query - always
indicated in the SQL definition
third paremeter (w) - reference (single token) to be used for the created
INTERSECT object (not shown in the diagram!)
fourth parameter (s, optional, defaults to an empty string) - name to be
indicated as the LEFT part of INTERSECT. Either leave it empty (for compound
/nested INTERSECT statements), or use the same value as the first argument (x)
- for thefirst INTERSECT in the chain.
i.e. - s INTERSECT ALL y - which is referenced as w '/

!definelong intersect_all(x, y, w, s ='')
class " " as w <<(J, violet) INTERSECT ALL>> {
    {field} s <b>INTERSECT ALL</b> y
}

x --* "L" w

y --* "R" w

!enddefinelong

/' macro to create a representation of the EXCEPT of two queries and to
graphically link the EXCEPT object to the LEFT and RIGHT queries.
first parameter (x) - single token as reference to the LEFT query
second parameter (y) - single token as reference to the RIGHT query - always
indicated in the SQL definition
third paremeter (w) - reference (single token) to be used for the created
EXCEPT object (not shown in the diagram!)
fourth parameter (s, optional, defaults to an empty string) - name to be
indicated as the LEFT part of EXCEPT. Either leave it empty (for compound
/nested EXCEPT statements), or use the same value as the first argument (x)
- for the first EXCEPT in the chain.
i.e. - s EXCEPT y - which is referenced as w '/

!definelong except(x, y, w, s ='')
class " " as w <<(J, violet) EXCEPT>> {
    {field} s <b>EXCEPT</b> y
}

x --* "L" w

y --* "R" w

!enddefinelong

/' macro to create a representation of the EXCEPT ALL of two queries and to
graphically link the EXCEPT object to the LEFT and RIGHT queries.
first parameter (x) - single token as reference to the LEFT query
second parameter (y) - single token as reference to the RIGHT query - always
indicated in the SQL definition
third paremeter (w) - reference (single token) to be used for the created
EXCEPT object (not shown in the diagram!)
fourth parameter (s, optional, defaults to an empty string) - name to be
indicated as the LEFT part of EXCEPT. Either leave it empty (for compound
/nested EXCEPT statements), or use the same value as the first argument (x)
- for thefirst EXCEPT in the chain.
i.e. - s EXCEPT ALL y - which is referenced as w '/

!definelong except_all(x, y, w, s ='')
class " " as w <<(J, violet) EXCEPT ALL>> {
    {field} s <b>EXCEPT ALL</b> y
}

x --* "L" w

y --* "R" w

!enddefinelong